/*****************************************************************************
*  @COPYRIGHT NOTICE
*  @Copyright (c) 2016, REIN
*  @All rights reserved
*  @file	 : CommonFun.h
*  @version  : ver 1.0.0
*  @author   : mingl
*  @date     : 2016/09/26 08:30
*  @brief    : 常用工具函数
*  @detail   : 略
*****************************************************************************/

#ifndef _COMMON_FUN_H_  
#define _COMMON_FUN_H_  

#include "stdafx.h"
#include <string> 
#include <vector>
#include <afxinet.h>

using namespace std;

/************************************************************************\
*                             常 规 说 明                                *
\************************************************************************/
// WM_USER: 0x0400-0x7FFF

/************************************************************************\
*                                                                        *
*                             系 统 时 间                                *
*                                                                        *
\************************************************************************/

typedef enum {
    DATE_LONG,   // DATE_LONG   ：%Y-%m-%d %H:%M:%S     | 2016-08-10 11:12:30    
    DATE_LONG2,  // DATE_LONG2  ：%Y-%m-%d %H:%M:%S.000 | 2016-08-10 11:12:30.000
    DAY_NORMAL,  // DAY_NORMAL  ：%Y%m%d                | 20160810               
    TIME_NORMAL, // TIME_NORMAL ：%H%M%S                | 111230                 
    DATE_NORMAL, // DATE_NORMAL ：%Y%m%d%H%M%S          | 20160810111230         
    DAY_SHORT,   // DAY_SHORT   ：%m%d                  | 0810                   
    DAY_LONG,    // DAY_LONG    ：%Y-%m-%d              | 2016-08-10             
    TIME_LONG,   // TIME_LONG   ：%H:%M:%S              | 11:12:30               
    TIME_SHORT1, // TIME_SHORT1 ：%H:%M                 | 11:12                  
    TIME_SHORT2, // TIME_SHORT2 ：%H %M                 | 11 12                  
    MONTH_NORMAL,// MONTH_NORMAL：%Y%m                  | 20160810                
    MONTH_LONG,  // MONTH_LONG  ：%Y年%m月%d日          | 2016年08月10日         
    BANK_NORMAL  // BANK_NORMAL ：%m%d%H%M%S            | 0810111230             
}TIME_TYPE;

/************************************************************************\
* 功能：获取（当前时间lSpan天之后的）时间字符串                          *
* 入参：nType 见定义TIME_TYPE                                            *
*       lSpan 单位为“天”。lSpan=0时，获取当前时间                      *
* 出参：string 返回时间字符串                                            *
\************************************************************************/
string GetCurTime(TIME_TYPE nType, long lSpan = 0);

/************************************************************************\
* 功能：返回当前时间和 1970-1-1 00:00:00 之间的秒数                      *
* 入参：无                                                               *
* 出参：返回当前时间和 1970-1-1 00:00:00 之间的秒数                      *
\************************************************************************/
unsigned long GetCurTime();

/************************************************************************\
* 功能：比较时间差                                                       *
* 入参：%d-%d-%d %d:%d:%d                                                *
* 返回值：>0表示现在时间大于比较时间N天/秒即tCompare为N天/秒前日期       *
\************************************************************************/
int CompareDay(CTime tCompare);
int CompareSecond(CTime tCompare);
int CompareDay(CString strCompare);
int CompareSecond(CString strCompare);
CTimeSpan CompareTime(CString strCompare1, CString strCompare2);

/************************************************************************\
* 功能：设置系统当前时间                                                 *
* 入参：(格式必须为：2012-12-01 12:00:00)                                *
* 返回值：TRUE 成功；FALSE 失败                                          *
\************************************************************************/
BOOL SetSysTime(char* pCurTime);

/************************************************************************\
* 功能：获取CPUID                                                        *
* 返回值：CPUID                                                          *
\************************************************************************/
CString GetCPUID();


/************************************************************************\
*                                                                        *
*                             数 据 流 编 辑                             *
*                                                                        *
\************************************************************************/

/************************************************************************\
* 功能：字符串切割                                                       *
* 入参：strInfo                       | "123|345"                        *
*       strFlag                       | "|"                              *
* 返回值：std::vector<string/CString> | vct[0]="123"，vct[1]="345"       *
*------------------------------------------------------------------------*
* SplitString > CString分割                                              *
* Splitstring > string 分割                                              *
\************************************************************************/
std::vector<CString> SplitString(CString strInfo, CString strFlag);
std::vector<string> Splitstring(string strInfo, string strFlag);

/************************************************************************\
* 功能：字符串拷贝                                                       *
* 入参：szDest      目标地址                                             *
*       szSrc       源地址                                               *
*       nDestMaxLen 目标缓存最大值                                       *
* 返回值：short 字符串长度                                               *
\************************************************************************/
short StrCopy(char* szDest, const char* szSrc, int nDestMaxLen);

/************************************************************************\
* 功能：内存拷贝                                                         *
* 入参：pDest       目标地址                                             *
*       pSrc        源地址                                               *
*       nSrcLen     源缓存大小                                           *
*       nDestMaxLen 目标缓存最大值                                       *
* 返回值：short 字符串长度                                               *
\************************************************************************/
short MemCopy(void* pDest, const void* pSrc, int nSrcLen, int nDestMaxLen);

/************************************************************************\
* 功能：计算CRC值                                                        *
* 入参：ptrData      源数据                                              *
*       nlen         源数据长度                                          *
* 出参：ptrCRC       CRC值                                               *
\************************************************************************/
void CRC(LPBYTE ptrData, UINT nlen, LPBYTE ptrCRC);

/************************************************************************\
* 功能：（二进制数据流）转换成BCD字符串                                  *
* 注：BCD里面不支持16进制，此处可以衍生为16进制使用                      *
* 入参：pSrc         源数据                                              *
*       nLen         源数据长度                                          *
* 出参：pDest        BCD字符串（length=2*nLen）                          *
* 返回值：0成功 非0失败                                                  *
\************************************************************************/
int ConvertBCD(BYTE* pSrc, int nLen, BYTE* pDest);

/************************************************************************\
* 功能：BCD字符串（16进制格式字符串）转换为二进制流                      *
* 入参：pSrc         源数据（不得含有非16进制以外字符）                  *
* 出参：pDest        目标缓存地址（length=pSrc/2）                       *
* 返回值：0成功 非0失败                                                  *
\************************************************************************/
int ConvertBIN(BYTE* pSrc, BYTE* pDest);

/************************************************************************\
* ConvertUtf8ToGBK  > UTF8转 GBK                                         *
* ConvertGBKToUtf8  > GBK 转 UTF8                                        *
\************************************************************************/
void ConvertUtf8ToGBK(CString& strUtf8);
void ConvertGBKToUtf8(CString& strGBK);

/************************************************************************\
* 功能：字节流异或                                                       *
* 入参：pdata     源数据                                                 *
*       nLen      源数据长度                                             *
* 返回值：0成功 非0失败                                                  *
\************************************************************************/
BYTE CharXORChar(LPBYTE pdata, int nLen);

/************************************************************************\
* 功能：字节流累加和                                                     *
* 入参：pdata     源数据                                                 *
*       nLen      源数据长度                                             *
*       bChk      模（mod）                                              *
* 返回值：0成功 非0失败                                                  *
\************************************************************************/
BYTE Plus(LPBYTE pdata, int nLen, BYTE bChk);

/************************************************************************\
* 功能：将GBK汉字转化成多字节                                            *
*------------------------------------------------------------------------*
* 例：GBK编码“欢”“BB B6”转化成“0B 0B 0B 06”                        *
*------------------------------------------------------------------------*
* 入参：pIn       源数据                                                 *
*       pOut      目标地址                                               *
*       uIn       源数据长度                                             *
*       uOut      转换后目标数据长度                                     *
* 返回值：0成功 非0失败                                                  *
\************************************************************************/
void GbkTODoubleGbk(char* pIn, LPBYTE pOut, UINT uIn, UINT& uOut);

/************************************************************************\
* 功能：将GBK汉字转化成多字节                                            *
*------------------------------------------------------------------------*
* 例：GBK编码“欢1”“BB B6 31”转化成“BB B6 00 31”                    *
*------------------------------------------------------------------------*
* 入参：pIn       源数据                                                 *
*       pOut      目标地址                                               *
*       uIn       源数据长度                                             *
*       uOut      转换后目标数据长度                                     *
* 返回值：0成功 非0失败                                                  *
\************************************************************************/
void GbkTOSplitGbk(char* pIn, LPBYTE pOut, UINT uIn, UINT& uOut);


/************************************************************************\
*                                                                        *
*                             系 统 操 作                                *
*                                                                        *
\************************************************************************/

/************************************************************************\
* 功能：重启系统                                                         *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
BOOL Reboot();

/************************************************************************\
* 功能：关闭系统                                                         *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
BOOL ShutDown();

/************************************************************************\
* 功能：关闭所有指定进程                                                 *
* 入参：strKillProcessName 进程名称                                      *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
BOOL KillProcess(CString  strKillProcessName);

/************************************************************************\
* 功能：关闭指定进程                                                     *
* 入参：dwProcessID 进程ID                                               *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
BOOL KillProcess(DWORD  dwProcessID);

/************************************************************************\
* 功能：返回第一个进程ID 未找到返回0 失败-1                              *
* 入参：strProcessName 进程名称                                          *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
long FindProcess(CString  strProcessName);

/************************************************************************\
* 功能：启动进程 模态窗口无法隐藏                                        *
* 入参：strFile    文件全路径                                            *
*       strParam   应用参数（x.exe -version）                            *
*       uShow      是否隐藏界面                                          *
*       bBlock     是否等待应用结束                                      *
*       dwExitCode 应用退出码                                            *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
BOOL StartProcess(CString strFile, CString strParam, UINT uShow, BOOL bBlock, DWORD* dwExitCode);

/************************************************************************\
* 功能：启动进程（直到后台运行 确保服务启动 主要用来启动服务类程序）     *
* 入参：strFile    文件全路径                                            *
*       bHide      是否隐藏界面                                          *
* 返回值：TRUE 成功                                                      *
*------------------------------------------------------------------------*
* StartProcess  > 启动程序，直到程序消亡(阻塞)                           *
* StartProcess2 > 启动程序，无视程序是否消亡(非阻塞)                     *
\************************************************************************/
BOOL StartProcess(CString strFile, BOOL bHide);
BOOL StartProcess2(CString strFile, BOOL bHide);

/************************************************************************\
* 功能：读注册表                                                         *
* 入参：hKey      HKEY  | HKEY_CURRENT_USER ...                          *
*       lpSubKey  子KEY | "Software\\Microsoft\\Internet Explorer\\Zoom" *
*       lpName    name  | "ZoomDisabled"                                 *
* 返回值：TRUE 成功                                                      *
\************************************************************************/
CString ReadREG(HKEY hKey, LPCTSTR lpSubKey, LPCTSTR lpName);

/************************************************************************\
* 功能：写注册表                                                         *
* 入参：hKey      HKEY  | HKEY_CURRENT_USER ...                          *
*       lpSubKey  子KEY | "Software\\Microsoft\\Internet Explorer\\Zoom" *
*       lpName    name  | "ZoomDisabled"                                 *
*------------------------------------------------------------------------*
*       lpValue   值    | "1"                                            *
*------------------------------------------------------------------------*
*       dwType    类型  | REG_DWORD、REG_BINARY ...                      *
*       lpData    值    | 1                                              *
*       cbData    值大小| size of lpData                                 *
*------------------------------------------------------------------------*
* 返回值：TRUE 成功                                                      *
\************************************************************************/
BOOL WriteREG(HKEY hKey, LPCTSTR lpSubKey, LPCTSTR lpName, LPCTSTR lpValue);
BOOL WriteREG(HKEY hKey, LPCTSTR lpSubKey, LPCTSTR lpName, DWORD dwType, CONST BYTE* lpData, DWORD cbData);

/************************************************************************\
* 功能：获取系统最后错误，可以在调用系统API时使用                        *
* 返回值：错误说明                                                       *
\************************************************************************/
CString GetLastSysErr();

/************************************************************************\
* 功能：获取IP地址                                                       *
* 返回值：IP地址  （192.168.12.22）                                      *
\************************************************************************/
CString GetLocalIpaddress();

/************************************************************************\
* InputEnglish  > 切换英文输入法                                         *
* InputChinese  > 切换中文输入法                                         *
\************************************************************************/
BOOL InputEnglish();
BOOL InputChinese();



/************************************************************************\
*                                                                        *
*                             文 件 操 作                                *
*                                                                        *
\************************************************************************/

/************************************************************************\
* GetDiskSpace     > 获取磁盘大小（单位字节）                            *
* GetDirSize       > 获取文件夹大小                                      *
* CheckFileExist   > 检查文件是否存在                                    *
* CreateAllDirectory   > 创建所有路径                                    *
* GetFullPath      > 获取文件全路径                                      *
* FindFileFullPath > 找到文件夹下所有文件的全路径                        *
* FindFileName     > 找到文件夹下所有文件的文件名                        *
* DeleteDirectoryForce > 删除整个文件夹                                  *
*------------------------------------------------------------------------*
* FILESIZE         > 获取磁盘大小                                        *
* DIRSIZE          > 获取文件夹大小                                      *
* DISKSIZE         > 获取磁盘大小                                        *
* FILEEXIST        > 获取文件大小                                        *
* DELETEDIR        > 删除文件夹                                          *
\************************************************************************/
ULONGLONG GetDiskSpace(char* pDir);
unsigned long GetDirSize(char* pDir);
BOOL CheckFileExist(CString strFilePath);
BOOL CreateAllDirectory(LPCTSTR lpszPath);
CString GetFullPath(CString sFileName);
std::vector<CString> FindFileFullPath(CString strFoldername);
std::vector<CString> FindFileName(CString strFoldername);
void DeleteDirectoryForce(CString directory_path);

char* GetExePath();
char* GetModuleDisk();
char* GetModulePath();
char* GetModuleName();
char* GetModuleNameKey();

#define FILESIZE(path)    GetFileSize(CreateFile(path, FILE_READ_EA, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0), NULL)
#define DIRSIZE(path)     GetDirSize(path)
#define DISKSIZE(path)    GetDiskSpace(path)
#define FILEEXIST(path)   CheckFileExist(path)
#define DELETEDIR(path)   DeleteDirectoryForce(path)

/************************************************************************\
* 功能：删除(uDays天前的)日志                                            *
* 入参：strPath  日志路径   | "D:/ATM/LOG"                               *
*       uDays    日志       | 30                                         *
* 返回值：TRUE 成功                                                      *
*------------------------------------------------------------------------*
* 例子：                                                                 *
*   在“D:/ATM/LOG”路径下面有文件夹有“2016-01-01”“2016-01-02”...    *
*   假设今天是2016-01-02；执行后，将删除“2016-01-01”文件夹             *
*------------------------------------------------------------------------*
* 注：一般是配合“LOG2.H”这个文件使用                                   *
\************************************************************************/
BOOL DeleteLog(LPTSTR strPath, UINT uDays);





/************************************************************************\
*                                                                        *
*                                其 他                                   *
*                                                                        *
\************************************************************************/

/************************************************************************\
* GetMacSum：获取MAC地址（取所有物理和虚拟地址（不包括无线）MAC异或）    *
* GetUUID  ：取 GetCPUID() 和 GetMacSum() 异或的结果                     *
\************************************************************************/
CString GetMacSum();
CString GetUUID();


int HTTP_Download(LPCTSTR pFileURLInServer, //待下载文件的URL
             LPCTSTR pFileLocalFullPath);
int HTTP_UploadFile(LPCTSTR pURL, //负责接收上传操作的页面的URL
               LPCTSTR pLocalFileName);



#endif;